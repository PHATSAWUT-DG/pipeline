<?xml version='1.1' encoding='UTF-8'?>
<flow-build plugin="workflow-job@1540.v295eccc9778f">
  <actions>
    <hudson.model.CauseAction>
      <causeBag class="linked-hash-map">
        <entry>
          <hudson.model.Cause_-UserIdCause>
            <userId>admin</userId>
          </hudson.model.Cause_-UserIdCause>
          <int>1</int>
        </entry>
      </causeBag>
    </hudson.model.CauseAction>
    <jenkins.metrics.impl.TimeInQueueAction plugin="metrics@4.2.33-484.v2fcd689980d1">
      <queuingDurationMillis>31</queuingDurationMillis>
      <blockedDurationMillis>0</blockedDurationMillis>
      <buildableDurationMillis>0</buildableDurationMillis>
      <waitingDurationMillis>21</waitingDurationMillis>
    </jenkins.metrics.impl.TimeInQueueAction>
    <org.jenkinsci.plugins.workflow.libs.LibrariesAction plugin="pipeline-groovy-lib@752.vdddedf804e72">
      <libraries/>
    </org.jenkinsci.plugins.workflow.libs.LibrariesAction>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.ExecutionModelAction plugin="pipeline-model-definition@2.2265.v140e610fe9d5">
      <stagesUUID>7e9c6b0b-0c0f-4782-8821-81f22e81146c</stagesUUID>
      <pipelineDefs>
        <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTPipelineDef plugin="pipeline-model-api@2.2265.v140e610fe9d5">
          <stages>
            <stages>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>Maven Check</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                        <name>script</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>scriptBlock</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                                <value class="string">try {
                        sh &apos;docker --version&apos;
                        sh &apos;docker info&apos;
                        sh &apos;pwd&apos;
                        sh &apos;ls -la&apos;
                        sh &apos;find . -name &quot;pom.xml&quot; -type f&apos;
                    } catch (Exception e) {
                        echo &quot;Docker access issue: ${e.getMessage()}&quot;
                        error &quot;Docker is not accessible. Please check Docker permissions.&quot;
                    }</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>Build</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                        <name>script</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>scriptBlock</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                                <value class="string">try {
                        sh &apos;&apos;&apos;
                        # Use correct workspace path and check if pom.xml exists
                        if [ -f &quot;${WORKSPACE}/pom.xml&quot; ]; then
                            echo &quot;Found pom.xml in workspace&quot;
                            docker run --rm -v &quot;${WORKSPACE}:/workspace&quot; -w /workspace maven:3.9.9 \
                              mvn clean compile test -DskipTests=false
                        else
                            echo &quot;pom.xml not found in workspace, listing files:&quot;
                            ls -la &quot;${WORKSPACE}&quot;
                            exit 1
                        fi
                        &apos;&apos;&apos;
                    } catch (Exception e) {
                        echo &quot;Build failed: ${e.getMessage()}&quot;
                        throw e
                    }</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>Package</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                        <name>script</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>scriptBlock</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                                <value class="string">try {
                        sh &apos;&apos;&apos;
                        # Package the application
                        if [ -f &quot;${WORKSPACE}/pom.xml&quot; ]; then
                            docker run --rm -v &quot;${WORKSPACE}:/workspace&quot; -w /workspace maven:3.9.9 \
                              mvn package -DskipTests=true
                        else
                            echo &quot;pom.xml not found for packaging&quot;
                            exit 1
                        fi
                        &apos;&apos;&apos;
                    } catch (Exception e) {
                        echo &quot;Package failed: ${e.getMessage()}&quot;
                        throw e
                    }</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>SonarQube</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                        <name>script</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>scriptBlock</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                                <value class="string">try {
                        sh &apos;&apos;&apos;
                        # Run SonarQube analysis with network access
                        if [ -f &quot;${WORKSPACE}/pom.xml&quot; ]; then
                            docker run --rm --network host \
                              -v &quot;${WORKSPACE}:/workspace&quot; -w /workspace maven:3.9.9 \
                              mvn clean verify sonar:sonar \
                              -Dsonar.projectKey=${PROJECT_KEY} \
                              -Dsonar.projectName=&quot;${PROJECT_NAME}&quot; \
                              -Dsonar.host.url=${SONAR_HOST_URL} \
                              -Dsonar.token=${SONAR_TOKEN}
                        else
                            echo &quot;pom.xml not found for SonarQube analysis&quot;
                            exit 1
                        fi
                        &apos;&apos;&apos;
                    } catch (Exception e) {
                        echo &quot;SonarQube analysis failed: ${e.getMessage()}&quot;
                        throw e
                    }</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
            </stages>
            <uuid>7e9c6b0b-0c0f-4782-8821-81f22e81146c</uuid>
          </stages>
          <postBuild>
            <conditions>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBuildCondition>
                <condition>always</condition>
                <branch>
                  <name>default</name>
                  <steps>
                    <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                      <name>script</name>
                      <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                        <arguments class="linked-hash-map">
                          <entry>
                            <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <key>scriptBlock</key>
                            </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                            <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                              <value class="string">try {
                    // Clean up any remaining containers (if accessible)
                    sh &apos;&apos;&apos;
                    docker ps -aq --filter &quot;name=maven-&quot; | xargs -r docker stop || echo &quot;No containers to stop&quot;
                    docker ps -aq --filter &quot;name=maven-&quot; | xargs -r docker rm -f || echo &quot;No containers to clean&quot;
                    &apos;&apos;&apos;
                } catch (Exception e) {
                    echo &quot;Cleanup warning: ${e.getMessage()}&quot;
                }</value>
                            </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                          </entry>
                        </arguments>
                      </args>
                    </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                  </steps>
                </branch>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBuildCondition>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBuildCondition>
                <condition>success</condition>
                <branch>
                  <name>default</name>
                  <steps>
                    <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                      <name>echo</name>
                      <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                        <arguments class="linked-hash-map">
                          <entry>
                            <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <key>message</key>
                            </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                            <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                              <value class="string">Pipeline completed successfully!</value>
                            </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                          </entry>
                        </arguments>
                      </args>
                    </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                    <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                      <name>echo</name>
                      <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                        <arguments class="linked-hash-map">
                          <entry>
                            <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <key>message</key>
                            </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                            <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-GStringValue>
                              <value class="string">&quot;SonarQube Analysis: ${SONAR_HOST_URL}/dashboard?id=${PROJECT_KEY}&quot;</value>
                            </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-GStringValue>
                          </entry>
                        </arguments>
                      </args>
                    </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                  </steps>
                </branch>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBuildCondition>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBuildCondition>
                <condition>failure</condition>
                <branch>
                  <name>default</name>
                  <steps>
                    <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                      <name>echo</name>
                      <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                        <arguments class="linked-hash-map">
                          <entry>
                            <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <key>message</key>
                            </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                            <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                              <value class="string">Pipeline failed!</value>
                            </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                          </entry>
                        </arguments>
                      </args>
                    </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                  </steps>
                </branch>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBuildCondition>
            </conditions>
          </postBuild>
          <environment>
            <variables class="linked-hash-map">
              <entry>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                  <key>SONAR_TOKEN</key>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                  <value class="string">sqp_4baffa57a1e9bd4f1ae289ac790fb6ca4fdbd487</value>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
              </entry>
              <entry>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                  <key>SONAR_HOST_URL</key>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                  <value class="string">http://172.17.0.3:9000</value>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
              </entry>
              <entry>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                  <key>PROJECT_KEY</key>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                  <value class="string">test</value>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
              </entry>
              <entry>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                  <key>PROJECT_NAME</key>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                  <value class="string">test</value>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
              </entry>
            </variables>
          </environment>
          <agent>
            <agentType>
              <key>any</key>
            </agentType>
          </agent>
        </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTPipelineDef>
      </pipelineDefs>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.ExecutionModelAction>
    <hudson.plugins.git.util.BuildData plugin="git@5.7.0">
      <buildsByBranchName>
        <entry>
          <string>refs/remotes/origin/main</string>
          <hudson.plugins.git.util.Build>
            <marked plugin="git-client@6.3.2">
              <sha1>bd3bb72ab07cb8714b1db4d9bf5458760049a01f</sha1>
              <branches class="list">
                <hudson.plugins.git.Branch>
                  <sha1 reference="../../../sha1"/>
                  <name>refs/remotes/origin/main</name>
                </hudson.plugins.git.Branch>
              </branches>
            </marked>
            <revision reference="../marked"/>
            <hudsonBuildNumber>4</hudsonBuildNumber>
          </hudson.plugins.git.util.Build>
        </entry>
      </buildsByBranchName>
      <lastBuild reference="../buildsByBranchName/entry/hudson.plugins.git.util.Build"/>
      <remoteUrls>
        <string>https://github.com/PHATSAWUT-DG/pipeline.git</string>
      </remoteUrls>
    </hudson.plugins.git.util.BuildData>
    <org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState plugin="workflow-scm-step@437.v05a_f66b_e5ef8">
      <revisionStates>
        <entry>
          <string>git https://github.com/PHATSAWUT-DG/pipeline.git</string>
          <hudson.scm.SCMRevisionState_-None/>
        </entry>
      </revisionStates>
    </org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState>
    <jenkins.metrics.impl.SubTaskTimeInQueueAction plugin="metrics@4.2.33-484.v2fcd689980d1">
      <queuingDurationMillis>17</queuingDurationMillis>
      <blockedDurationMillis>0</blockedDurationMillis>
      <buildableDurationMillis>15</buildableDurationMillis>
      <waitingDurationMillis>0</waitingDurationMillis>
      <executingDurationMillis>21821</executingDurationMillis>
      <workUnitCount>1</workUnitCount>
    </jenkins.metrics.impl.SubTaskTimeInQueueAction>
  </actions>
  <queueId>6</queueId>
  <timestamp>1756589600364</timestamp>
  <startTime>1756589600454</startTime>
  <result>FAILURE</result>
  <duration>25782</duration>
  <charset>UTF-8</charset>
  <keepLog>false</keepLog>
  <execution class="org.jenkinsci.plugins.workflow.cps.CpsFlowExecution">
    <result>FAILURE</result>
    <script>pipeline {
    agent any
    
    environment {
        SONAR_TOKEN = &apos;sqp_4baffa57a1e9bd4f1ae289ac790fb6ca4fdbd487&apos;
        SONAR_HOST_URL = &apos;http://172.17.0.3:9000&apos;
        PROJECT_KEY = &apos;test&apos;
        PROJECT_NAME = &apos;test&apos;
    }

    stages {
        stage(&apos;Maven Check&apos;) {
            steps {
                script {
                    try {
                        sh &apos;docker --version&apos;
                        sh &apos;docker info&apos;
                        sh &apos;pwd&apos;
                        sh &apos;ls -la&apos;
                        sh &apos;find . -name &quot;pom.xml&quot; -type f&apos;
                    } catch (Exception e) {
                        echo &quot;Docker access issue: ${e.getMessage()}&quot;
                        error &quot;Docker is not accessible. Please check Docker permissions.&quot;
                    }
                }
            }
        }
        
        stage(&apos;Build&apos;) {
            steps {
                script {
                    try {
                        sh &apos;&apos;&apos;
                        # Use correct workspace path and check if pom.xml exists
                        if [ -f &quot;${WORKSPACE}/pom.xml&quot; ]; then
                            echo &quot;Found pom.xml in workspace&quot;
                            docker run --rm -v &quot;${WORKSPACE}:/workspace&quot; -w /workspace maven:3.9.9 \
                              mvn clean compile test -DskipTests=false
                        else
                            echo &quot;pom.xml not found in workspace, listing files:&quot;
                            ls -la &quot;${WORKSPACE}&quot;
                            exit 1
                        fi
                        &apos;&apos;&apos;
                    } catch (Exception e) {
                        echo &quot;Build failed: ${e.getMessage()}&quot;
                        throw e
                    }
                }
            }
        }
        
        stage(&apos;Package&apos;) {
            steps {
                script {
                    try {
                        sh &apos;&apos;&apos;
                        # Package the application
                        if [ -f &quot;${WORKSPACE}/pom.xml&quot; ]; then
                            docker run --rm -v &quot;${WORKSPACE}:/workspace&quot; -w /workspace maven:3.9.9 \
                              mvn package -DskipTests=true
                        else
                            echo &quot;pom.xml not found for packaging&quot;
                            exit 1
                        fi
                        &apos;&apos;&apos;
                    } catch (Exception e) {
                        echo &quot;Package failed: ${e.getMessage()}&quot;
                        throw e
                    }
                }
            }
        }
        
        stage(&apos;SonarQube&apos;) {
            steps {
                script {
                    try {
                        sh &apos;&apos;&apos;
                        # Run SonarQube analysis with network access
                        if [ -f &quot;${WORKSPACE}/pom.xml&quot; ]; then
                            docker run --rm --network host \
                              -v &quot;${WORKSPACE}:/workspace&quot; -w /workspace maven:3.9.9 \
                              mvn clean verify sonar:sonar \
                              -Dsonar.projectKey=${PROJECT_KEY} \
                              -Dsonar.projectName=&quot;${PROJECT_NAME}&quot; \
                              -Dsonar.host.url=${SONAR_HOST_URL} \
                              -Dsonar.token=${SONAR_TOKEN}
                        else
                            echo &quot;pom.xml not found for SonarQube analysis&quot;
                            exit 1
                        fi
                        &apos;&apos;&apos;
                    } catch (Exception e) {
                        echo &quot;SonarQube analysis failed: ${e.getMessage()}&quot;
                        throw e
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                try {
                    // Clean up any remaining containers (if accessible)
                    sh &apos;&apos;&apos;
                    docker ps -aq --filter &quot;name=maven-&quot; | xargs -r docker stop || echo &quot;No containers to stop&quot;
                    docker ps -aq --filter &quot;name=maven-&quot; | xargs -r docker rm -f || echo &quot;No containers to clean&quot;
                    &apos;&apos;&apos;
                } catch (Exception e) {
                    echo &quot;Cleanup warning: ${e.getMessage()}&quot;
                }
            }
        }
        success {
            echo &apos;Pipeline completed successfully!&apos;
            echo &quot;SonarQube Analysis: ${SONAR_HOST_URL}/dashboard?id=${PROJECT_KEY}&quot;
        }
        failure {
            echo &apos;Pipeline failed!&apos;
        }
    }
}
</script>
    <loadedScripts class="linked-hash-map"/>
    <durabilityHint>MAX_SURVIVABILITY</durabilityHint>
    <timings class="map">
      <entry>
        <string>flowNode</string>
        <long>2564566620</long>
      </entry>
      <entry>
        <string>classLoad</string>
        <long>359196335</long>
      </entry>
      <entry>
        <string>runQueue</string>
        <long>19709385008</long>
      </entry>
      <entry>
        <string>run</string>
        <long>12448749005</long>
      </entry>
      <entry>
        <string>parse</string>
        <long>206169710</long>
      </entry>
      <entry>
        <string>saveProgram</string>
        <long>8163121462</long>
      </entry>
    </timings>
    <internalCalls class="sorted-set">
      <string>hudson.AbortException.getMessage</string>
      <string>hudson.model.Result.fromString</string>
      <string>org.jenkinsci.plugins.pipeline.StageStatus.TAG_NAME</string>
      <string>org.jenkinsci.plugins.workflow.job.WorkflowRun.result</string>
    </internalCalls>
    <sandbox>true</sandbox>
    <iota>63</iota>
    <head>1:63</head>
    <done>true</done>
    <resumeBlocked>false</resumeBlocked>
    <storageDir>workflow-completed</storageDir>
  </execution>
  <completed>true</completed>
  <checkouts class="hudson.util.PersistedList">
    <org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
      <scm class="hudson.plugins.git.GitSCM" plugin="git@5.7.0">
        <configVersion>2</configVersion>
        <userRemoteConfigs>
          <hudson.plugins.git.UserRemoteConfig>
            <url>https://github.com/PHATSAWUT-DG/pipeline.git</url>
          </hudson.plugins.git.UserRemoteConfig>
        </userRemoteConfigs>
        <branches>
          <hudson.plugins.git.BranchSpec>
            <name>*/main</name>
          </hudson.plugins.git.BranchSpec>
        </branches>
        <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
        <submoduleCfg class="empty-list"/>
        <extensions/>
      </scm>
      <node></node>
      <workspace>/var/jenkins_home/workspace/6510110357</workspace>
      <changelogFile>/var/jenkins_home/jobs/6510110357/builds/4/changelog12453459301102569546.xml</changelogFile>
      <pollingBaseline class="hudson.scm.SCMRevisionState$None" reference="../../../actions/org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState/revisionStates/entry/hudson.scm.SCMRevisionState_-None"/>
    </org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
  </checkouts>
</flow-build>